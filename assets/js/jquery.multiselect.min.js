!function (p) { var n = 0, o = { open: { class: "ui-multiselect-open", icon: '<span class="ui-icon ui-icon-triangle-1-s"></span', title: "Open" }, close: { class: "ui-multiselect-close", icon: '<span class="ui-icon ui-icon-circle-close"></span>', title: "Close" }, checkAll: { class: "ui-multiselect-all", icon: '<span class="ui-icon ui-icon-check"></span>', text: "Check all", title: "Check all" }, uncheckAll: { class: "ui-multiselect-none", icon: '<span class="ui-icon ui-icon-closethick"></span>', text: "Uncheck all", title: "Uncheck all" }, flipAll: { class: "ui-multiselect-flip", icon: '<span class="ui-icon ui-icon-arrowrefresh-1-w"></span>', text: "Flip all", title: "Flip all" }, collapse: { icon: '<span class="ui-icon ui-icon-minusthick"></span>', title: "Collapse" }, expand: { icon: '<span class="ui-icon ui-icon-plusthick"></span>', title: "Expand" }, collapseAll: { class: "ui-multiselect-collapseall", icon: '<span class="ui-icon ui-icon-minus"></span>', text: "Collapse all", title: "Collapse all" }, expandAll: { class: "ui-multiselect-expandall", icon: '<span class="ui-icon ui-icon-plus"></span>', text: "Expand all", title: "Expand all" } }; function d(e, t, i) { if ("string" != typeof e) return { px: e, minimax: 0 }; var s = e.match(/([<>])?=?\s*([.\d]+)\s*([eimnptx%]*)s?/i), e = s[1], l = parseFloat(s[2]), n = s[3].toLowerCase(), o = -1; switch (n) { case "pt": case "in": case "cm": case "mm": o = { pt: 4 / 3, in: 96, cm: 96 / 2.54, mm: 96 / 25.4 }[n] * l; break; case "em": o = parseFloat(window.getComputedStyle ? getComputedStyle(document.body).fontSize : "16px") * l; break; case "%": t && ("string" != typeof t && t.jquery || (t = p(t)), o = (i ? t.parent().height() : t.parent().width()) * (l / 100)); break; default: o = l }return { px: o, minimax: ">" == e ? -1 : "<" == e ? 1 : 0 } } p.widget("ech.multiselect", { options: { buttonWidth: 225, menuWidth: null, menuHeight: 200, resizableMenu: !1, appendTo: null, position: {}, zIndex: null, classes: "", header: ["checkAll", "uncheckAll"], linkInfo: null, noneSelectedText: "Select options", selectedText: "# of # selected", selectedList: 0, selectedListSeparator: ", ", maxSelected: null, openEffect: null, closeEffect: null, autoOpen: !1, htmlText: [], wrapText: ["button", "header", "options"], listbox: !1, addInputNames: !0, disableInputsOnToggle: !0, groupsSelectable: !0, groupsCollapsable: !1, groupColumns: !1, groupColumnsWidth: !1 }, _getAppendEl: function () { var e, t = this.options.appendTo; return t = !(t = !(t = t && ((e = t).jquery ? e : e.nodeType ? p(e) : p(e).eq(0))) || !t[0] ? this.element.closest(".ui-front, dialog") : t).length ? p(document.body) : t }, _buildButton: function () { var e = this.options.wrapText || [], e = (this.$button = p(document.createElement("button"))).addClass("ui-multiselect ui-widget ui-state-default ui-corner-all" + (-1 < e.indexOf("button") ? "" : " ui-multiselect-nowrap") + (this.options.classes ? " " + this.options.classes : "")).attr({ type: "button", title: this.element[0].title, tabIndex: this.element[0].tabIndex, id: this.element[0].id ? this.element[0].id + "_ms" : null }).prop("aria-haspopup", !0).html(this._linkHTML('<span class="{{class}}" title="{{title}}">{{icon}}</span>', "open")); return this.$buttonlabel = p(document.createElement("span")).html(this.options.noneSelectedText || this.element[0].placeholder).appendTo(e), e }, _buildHeaderHtml: function () { if (!this.options.header) return ""; if ("string" == typeof this.options.header) return "<li>" + this.options.header + "</li>"; var e = ""; if (this.options.header.constructor == Array) for (var t = 0; t < this.options.header.length; t++)(s = this.options.header[t]) && s in this.linkInfo && (!this.options.maxSelected || "checkAll" !== s) && -1 === ["open", "close", "collapse", "expand"].indexOf(s) && (e += this._linkHTML('<li><a class="{{class}}" title="{{title}}">{{icon}}<span>{{text}}</span></a></li>', s)); if (this.options.header.constructor == Object) for (var i = Object.keys(this.options.header), t = 0; t < i.length; t++) { var s, l = i[t]; (s = this.options.header[l]) && s in this.linkInfo && (!this.options.maxSelected || "checkAll" !== s) && -1 === ["open", "close", "collapse", "expand"].indexOf(s) && (e += this._linkHTML('<li><a class="{{class}}" title="{{title}}">{{icon}}<span>' + l + "</span></a></li>", s)) } return e }, _create: function () { var e = this.element, t = this.options; this.linkInfo = p.extend(!0, {}, o, t.linkInfo || {}), this._selectWidth = e.outerWidth(), e.hide(), t.htmlText = t.htmlText || []; var i = t.wrapText = t.wrapText || []; this.speed = p.fx.speeds._default, this._isOpen = !1, this._namespaceID = this.eventNamespace, this.multiselectID = n++, this.$headerLinkContainer = p(document.createElement("ul")).addClass("ui-helper-reset").html(this._buildHeaderHtml() + (t.listbox ? "" : this._linkHTML('<li class="{{class}}"><a class="{{class}}" title="{{title}}">{{icon}}</a></li>', "close"))); var s = (this.$header = p(document.createElement("div"))).addClass("ui-multiselect-header ui-widget-header ui-corner-all ui-helper-clearfix").append(this.$headerLinkContainer), l = (this.$checkboxes = p(document.createElement("ul"))).addClass("ui-multiselect-checkboxes ui-helper-reset" + (-1 < i.indexOf("options") ? "" : " ui-multiselect-nowrap")), i = (this.$menu = p(document.createElement("div"))).addClass("ui-multiselect-menu ui-widget ui-widget-content ui-corner-all" + (e[0].multiple ? "" : " ui-multiselect-single") + (t.listbox ? " ui-multiselect-listbox" : "") + (this.options.classes ? " " + this.options.classes : "")).append(s, l); t.listbox ? i.insertAfter(e) : ((s = this._buildButton()).insertAfter(e), (l = this._getAppendEl()).append(i), t.zIndex || l.hasClass("ui-front") || (e = this.element.closest(".ui-front, dialog"), t.zIndex = Math.max(e && parseInt(e.css("z-index"), 10) + 1 || 0, l && parseInt(l.css("z-index"), 10) + 1 || 0)), t.zIndex && i.css("z-index", t.zIndex), t.position = p.extend({ my: "left top", at: "left bottom", of: s }, t.position || {})), this._bindEvents(), this.refresh(!0) }, _linkHTML: function (e, i) { var s = this; return e.replace(/{{(.*?)}}/gi, function (e, t) { return s.linkInfo[i][t] }).replace("<span></span>", "") }, _init: function () { var e = this.element[0]; !1 !== this.options.header ? this.$headerLinkContainer.find(".ui-multiselect-all, .ui-multiselect-none, .ui-multiselect-flip").toggle(!!e.multiple) : this.$header.hide(), this.options.autoOpen && !this.options.listbox && this.open(), e.disabled && this.disable() }, _makeOption: function (e) { var t, i = this.element.get(0), s = i.id || this.multiselectID, l = "ui-multiselect-" + this.multiselectID + "-" + (e.id || s + "-option-" + this.inputIdCounter++), n = i.multiple, o = e.disabled, a = e.selected, c = document.createElement("input"), u = { type: n ? "checkbox" : "radio", id: l, title: e.title || null, value: e.value, name: this.options.addInputNames ? "multiselect_" + s : null, checked: a ? "checked" : null, "aria-selected": a ? "true" : null, disabled: o ? "disabled" : null, "aria-disabled": o ? "true" : null }; for (t in u) null !== u[t] && c.setAttribute(t, u[t]); for (var h = e.attributes, r = h.length, d = 0; d < r; d++) { var p = h[d]; /^data\-.+/.test(p.name) && c.setAttribute(p.name, p.value) } var m = document.createElement("span"); this.htmlAllowedFor("options") ? m.innerHTML = e.innerHTML : m.textContent = e.textContent, f = m, (s = (i = e).getAttribute("data-image-src")) && ((i = document.createElement("img")).setAttribute("src", s), f.insertBefore(i, f.firstChild)); var f = document.createElement("label"); f.setAttribute("for", l), e.title && f.setAttribute("title", e.title), f.className += (o ? " ui-state-disabled" : "") + (a && !n ? " ui-state-active" : "") + " ui-corner-all", f.appendChild(c), f.appendChild(m); m = document.createElement("li"); return m.className = (o ? "ui-multiselect-disabled " : "") + (this.options.groupColumns ? " ui-multiselect-columns" : "") + (e.className || ""), this.options.groupColumnsWidth && (m.style.width = this.options.groupColumnsWidth + "px"), m.appendChild(f), m }, _buildOptionList: function () { var n = this, o = []; this.inputIdCounter = 0, this.element.children().each(function () { var e, t, i, s, l = this; "OPTGROUP" === l.tagName.toUpperCase() ? (e = [], p(l).children().each(function () { e.push(n._makeOption(this)) }), t = n.options.groupsCollapsable ? p(document.createElement("button")).attr({ title: n.linkInfo.collapse.title, type: "button" }).addClass("ui-state-default ui-corner-all ui-multiselect-collapser").html(n.linkInfo.collapse.icon) : null, i = p(document.createElement("a")).addClass("ui-multiselect-grouplabel" + (n.options.groupsSelectable ? " ui-multiselect-selectable" : "")).html(l.getAttribute("label")), s = p(document.createElement("ul")).append(e), s = p(document.createElement("li")).addClass("ui-multiselect-optgroup" + (n.options.groupColumns ? " ui-multiselect-columns" : "") + (l.className ? " " + l.className : "")).append(t, i, s), n.options.groupColumnsWidth && s.css("width", n.options.groupColumnsWidth + "px"), o.push(s)) : o.push(n._makeOption(l)) }), this.$checkboxes.empty().append(o) }, refresh: function (e) { var t = this.element; !1 !== this.options.header && this.$headerLinkContainer.find(".ui-multiselect-all, .ui-multiselect-none, .ui-multiselect-flip").toggle(!!t[0].multiple), this._buildOptionList(), this._updateCache(), this.options.listbox ? (this._isOpen || (this.$menu.show(), this._isOpen = !0), this._setMenuWidth(), this._setMenuHeight()) : (this._setButtonWidth(), this.update(!0)), e || this._trigger("refresh") }, _updateCache: function () { this._savedButtonWidth = 0, this._savedMenuWidth = 0, this._savedMenuHeight = 0, this.$header = this.$menu.children(".ui-multiselect-header"), this.$checkboxes = this.$menu.children(".ui-multiselect-checkboxes"), this.$labels = this.$menu.find("label:not(.ui-multiselect-filter-label)"), this.$inputs = this.$labels.children("input"), this.element.is(':data("ech-multiselectfilter")') && this.element.data("ech-multiselectfilter").updateCache(!0) }, resync: function (e) { var t, i = this.$inputs, s = this.element.find("option"); i.length === s.length ? (t = {}, i.not(e ? ":disabled" : "").each(function () { t[this.value] = this }), s.not(e ? ":disabled" : "").each(function () { this.value in t && (t[this.value].checked = this.selected) }), this._trigger("resync"), this.update()) : this.refresh() }, update: function (e) { var t, i, s, l, n, o; this.options.listbox || (i = (t = this.options).selectedList, s = t.selectedText, o = (n = this.$inputs).length, o = (n = (l = n.filter(":checked")).length) ? "function" == typeof s ? s.call(this, n, o, l.get()) : /\d/.test(i) && 0 < i && n <= i ? l.map(function () { return p(this).next().text().replace(/\n$/, "") }).get().join(t.selectedListSeparator) : s.replace("#", n).replace("#", o) : t.noneSelectedText, this._setButtonValue(o, e), -1 === t.wrapText.indexOf("button") && this._setButtonWidth(!0), this._isOpen && this._savedButtonHeight != this.$button.outerHeight(!1) && this.position()) }, _setButtonValue: function (e, t) { this.$buttonlabel[this.htmlAllowedFor("button") ? "html" : "text"](e), t && (this.$button[0].defaultValue = e) }, _bindButtonEvents: function () { var e = this; function t() { return e[e._isOpen ? "close" : "open"](), !1 } this.$button.on({ click: t, keydown: p.proxy(e._handleButtonKeyboardNav, e), mouseenter: function () { this.classList.contains("ui-state-disabled") || this.classList.add("ui-state-hover") }, mouseleave: function () { this.classList.remove("ui-state-hover") }, focus: function () { this.classList.contains("ui-state-disabled") || this.classList.add("ui-state-focus") }, blur: function () { this.classList.remove("ui-state-focus") } }).find("span").on("click.multiselect,click", t) }, _handleButtonKeyboardNav: function (e) { if (this._isOpen || this.element[0].multiple || 38 !== e.which && 40 !== e.which) switch (e.which) { case 27: case 37: case 38: this.close(); break; case 40: case 39: this.open() } else { var t = this.$inputs, i = t.index(t.filter(":checked")); 38 === e.which && i ? t.eq(i - 1).trigger("click") : 40 === e.which && i < t.length - 1 && t.eq(i + 1).trigger("click") } }, _bindCheckboxEvents: function () { var d = this; d.$checkboxes.on("click.multiselect", ".ui-multiselect-grouplabel", function (e) { if (e.preventDefault(), !d.options.groupsSelectable) return !1; var t, i = p(this).next("ul").children(":not(.ui-multiselect-excluded)").find("input").not(":disabled"), s = i.get(), l = this.textContent; !1 !== d._trigger("beforeoptgrouptoggle", e, { inputs: s, label: l }) && ((t = d.options.maxSelected) && d.$inputs.filter(":checked").length + i.length > t || (d._toggleChecked(i.filter(":checked").length !== i.length, i), d._trigger("optgrouptoggle", e, { inputs: s, label: l, checked: s.length ? s[0].checked : null }))) }).on("click.multiselect", ".ui-multiselect-collapser", function (e) { var t = p(this), i = t.parent(), s = i.find(".ui-multiselect-grouplabel").first().html(), l = d.linkInfo, n = "ui-multiselect-collapsed", o = i.hasClass(n); !1 !== d._trigger("beforecollapsetoggle", e, { label: s, collapsed: o }) && (i.toggleClass(n), t.attr("title", (o ? l.collapse : l.expand).title).html((o ? l.collapse : l.expand).icon), d.options.listbox || d._setMenuHeight(!0), d._trigger("collapsetoggle", e, { label: s, collapsed: !o })) }).on("mouseenter.multiselect", ".ui-multiselect-collapser", function (e) { this.classList.add("ui-state-hover") }).on("mouseleave.multiselect", ".ui-multiselect-collapser", function (e) { this.classList.remove("ui-state-hover") }).on("mouseenter.multiselect", "label", function (e, t) { var i, s, l, n, o; this.classList.contains("ui-state-disabled") || (s = (i = d.$checkboxes[0]).scrollLeft, l = i.scrollTop, n = window.pageXOffset, o = window.pageYOffset, d.$labels.removeClass("ui-state-hover"), p(this).addClass("ui-state-hover").find("input").focus(), t && t.allowScroll || (i.scrollLeft = s, i.scrollTop = l, window.scrollTo(n, o))) }).on("keydown.multiselect", "label", function (e) { if (82 !== e.which && !(111 < e.which && e.which < 124)) switch (e.preventDefault(), e.which) { case 9: e.shiftKey ? (d.$menu.find(".ui-state-hover").removeClass("ui-state-hover"), d.$header.find("li").last().find("a").focus()) : d.close(); break; case 27: d.close(); break; case 38: case 40: case 37: case 39: d._traverse(e.which, this); break; case 13: case 32: p(this).find("input")[0].click(); break; case 65: e.altKey && d.checkAll(); break; case 70: e.altKey && d.flipAll(); break; case 85: e.altKey && d.uncheckAll() } }).on("click.multiselect", "input", function (e) { var t = this, i = p(t), s = t.value, l = t.checked, n = d.element, o = n.find("option"), a = n[0].multiple, c = d.$inputs, u = c.filter(":checked").length, h = d.options, r = d.htmlAllowedFor("options") ? "html" : "text", r = i.parent().find("span")[r](), h = h.maxSelected; if (t.disabled || !1 === d._trigger("click", e, { value: s, text: r, checked: l })) e.preventDefault(); else { if (h && l && h < u) return !1 !== d._trigger("maxselected", e, { labels: d.$labels, inputs: c }) && d.buttonMessage("<center><b>LIMIT OF " + (u - 1) + " REACHED!</b></center>"), t.checked = !1, e.preventDefault(), !1; t.focus(), i.prop("aria-selected", l), o.each(function () { this.selected = this.value === s ? l : a && this.selected }), a || (d.$labels.removeClass("ui-state-active"), i.closest("label").toggleClass("ui-state-active", l), d.close()), n.trigger("change"), setTimeout(p.proxy(d.update, d), 10) } }) }, _bindHeaderEvents: function () { var i = this; i.$header.on("click.multiselect", "a", function (e) { var t = { "ui-multiselect-close": "close", "ui-multiselect-all": "checkAll", "ui-multiselect-none": "uncheckAll", "ui-multiselect-flip": "flipAll", "ui-multiselect-collapseall": "collapseAll", "ui-multiselect-expandall": "expandAll" }; for (hdgClass in t) if (this.classList.contains(hdgClass)) return i[t[hdgClass]](), e.preventDefault(), !1 }).on("keydown.multiselect", "a", function (e) { switch (e.which) { case 27: i.close(); break; case 9: var t = p(e.target); (!e.shiftKey || t.parent().prev().length || i.$header.find(".ui-multiselect-filter").length) && (t.parent().next().length || i.$labels.length || e.shiftKey) || (i.close(), e.preventDefault()) } }) }, _setResizable: function () { this.options.resizableMenu && "resizable" in p.ui && (this.$menu.show(), this.$menu.resizable({ containment: "parent", handles: "s", helper: "ui-multiselect-resize", stop: function (e, t) { t.size.width = t.originalSize.width, p(this).outerWidth(t.originalSize.width), !1 !== this._trigger("resize", e, t) && (this.options.menuHeight = t.size.height), this._setMenuHeight(!0) } }), this.$menu.hide()) }, _bindEvents: function () { this.options.listbox || this._bindButtonEvents(), this._bindHeaderEvents(), this._bindCheckboxEvents(), this._setResizable(), this.document.on("mousedown" + this._namespaceID + " wheel" + this._namespaceID + " mousewheel" + this._namespaceID, function (e) { e = e.target; !this._isOpen || this.$button && (e === this.$button[0] || p.contains(this.$button[0], e)) || e === this.$menu[0] || p.contains(this.$menu[0], e) || this.close() }.bind(this)), p(this.element[0].form).on("reset" + this._namespaceID, function () { setTimeout(this.refresh.bind(this), 10) }.bind(this)) }, _setButtonWidth: function (e) { var t, i, s; this._savedButtonWidth && !e || (s = this._selectWidth || this._getBCRWidth(this.element), t = this.options.buttonWidth || "", /\d/.test(t) ? (e = (i = d(t, this.element)).px, s = (i = i.minimax) < 0 ? Math.max(s, e) : 0 < i ? Math.min(s, e) : e) : t = t.toLowerCase(), "auto" !== t && this.$button.outerWidth(s), this._savedButtonWidth = s) }, _setMenuWidth: function (e) { if (!this._savedMenuWidth || e) { var t, i = this.options.listbox ? this._selectWidth : this._savedButtonWidth || this._getBCRWidth(this.$button), s = this.options.menuWidth || ""; if (/\d/.test(s) ? (e = (t = d(s, this.element)).px, i = (t = t.minimax) < 0 ? Math.max(i, e) : 0 < t ? Math.min(i, e) : e) : s = s.toLowerCase(), "auto" !== s) return this.$menu.outerWidth(i), void (this._savedMenuWidth = i); this.$menu.addClass("ui-multiselect-measure"); s = this.$header.outerWidth(!0) + this._jqWidthFix(this.$header), i = this.$checkboxes.outerWidth(!0) + this._jqWidthFix(this.$checkboxes); this.$menu.removeClass("ui-multiselect-measure"); i = Math.max(-1 < this.options.wrapText.indexOf("header") ? 0 : s, i); this.$menu.width(i), this._savedMenuWidth = this.$menu.outerWidth(!1) } }, _setMenuHeight: function (e) { var t, i, s, l, n, o, a, c, u, h, r = this; r._savedMenuHeight && !e || (o = p(window).height(), n = r.options.menuHeight || "", t = !1, i = 4, /\d/.test(n) ? (s = r.$header.filter(":visible").outerHeight(!0), l = this.$menu.outerHeight(!1) - this.$menu.height(), e = this.$checkboxes.outerHeight(!1) - this.$checkboxes.height(), n = d(n, r.element, !0).px, o = Math.min(n, o) - s - l - e) : "size" === n.toLowerCase() && (t = !0, i = r.element[0].size || i), a = "hidden", c = 0, u = 4, h = -1, r.$checkboxes.find("li:not(.ui-multiselect-optgroup),a").filter(":visible").each(function () { if (h < 0 && (h = this.offsetTop), u = this.offsetTop + this.offsetHeight - h + 4, t && ++c >= i || o < u) return t || (u = o), !(a = "auto") }), r.$checkboxes.css("overflow", a).height(u), r._savedMenuHeight = this.$menu.outerHeight(!1)) }, _getBCRWidth: function (e) { if (!e || e.jquery && !e[0]) return null; e = (e.jquery ? e[0] : e).getBoundingClientRect(); return e.right - e.left }, _jqWidthFix: function (e) { return !e || e.jquery && !e[0] ? null : e.jquery ? this._getBCRWidth(e[0]) - e.outerWidth(!1) : this._getBCRWidth(e) - p(e).outerWidth(!1) }, _traverse: function (e, t) { var i = p(t), t = 38 === e || 37 === e, e = i.parent()[t ? "prevAll" : "nextAll"]("li:not(:disabled, .ui-multiselect-optgroup):visible").first(); (e = !e.length ? i.parents(".ui-multiselect-optgroup")[t ? "prev" : "next"]() : e).length ? e.find("label").filter(":visible")[t ? "last" : "first"]().trigger("mouseover", { allowScroll: !0 }) : ((e = this.$checkboxes).find("label").filter(":visible")[t ? "last" : "first"]().trigger("mouseover", { allowScroll: !0 }), e.scrollTop(t ? e.height() : 0)) }, _toggleState: function (t, i) { return function () { var e = "!" === i ? !this[t] : i; this.disabled || (this[t] = e), e ? this.setAttribute("aria-" + t, !0) : this.removeAttribute("aria-" + t) } }, _toggleChecked: function (e, t, i) { var s = this, l = s.element, t = t && t.length ? t : s.$inputs; (t = i ? (s._isOpen ? t.closest("li").not(".ui-multiselect-excluded").find("input") : t).not(":disabled") : t).each(s._toggleState("checked", e)), t.eq(0).focus(), s.update(); var n = {}; t.each(function () { n[this.value] = !0 }), l.find("option").each(function () { !this.disabled && n[this.value] && s._toggleState("selected", e).call(this) }), t.length && l.trigger("change") }, _toggleDisabled: function (e, t) { var i = "ui-state-disabled"; if (this.$button && this.$button.prop({ disabled: e, "aria-disabled": e })[e ? "addClass" : "removeClass"](i), this.options.disableInputsOnToggle) { var s = void 0 === t ? this.$inputs : this._multiselectOptgroupFilter(t).find("input"), l = "ui-multiselect-disabled"; if (e) for (var n = 0, o = (a = s.filter(":enabled").get()).length; n < o; n++)a[n].setAttribute("disabled", "disabled"), a[n].setAttribute("aria-disabled", "disabled"), a[n].classList.add(l), a[n].parentNode.classList.add(i); else for (var a, n = 0, o = (a = s.filter("." + l + ":disabled").get()).length; n < o; n++)a[n].removeAttribute("disabled"), a[n].removeAttribute("aria-disabled"), a[n].classList.remove(l), a[n].parentNode.classList.remove(i) } (void 0 === t ? this.element : this._nativeOptgroupFilter(t).find("option")).prop({ disabled: e, "aria-disabled": e }) }, open: function () { var e, t, i, s, l, n, o, a = this.$button; !1 === this._trigger("beforeopen") || a.hasClass("ui-state-disabled") || this._isOpen || this.options.listbox || (e = this.$menu, t = this.$header, i = this.$labels, s = this.$inputs.filter(":checked:not(.ui-state-disabled)"), o = this.options.openEffect, l = window.pageXOffset, n = window.pageYOffset, this.$checkboxes.scrollTop(0), e.css("display", "block"), this._setMenuWidth(), this._setMenuHeight(), this.position(), o && (e.css("display", "none"), "string" == typeof o ? e.show(o, this.speed) : "object" == typeof o && o.constructor == Array ? e.show(o[0], o[1] || this.speed) : "object" == typeof o && o.constructor == Object && e.show(o)), (o = t.find(".ui-multiselect-filter")).length ? o.first().find("input").trigger("focus") : s.length ? s.eq(0).trigger("focus").parent("label").eq(0).trigger("mouseover").trigger("mouseenter") : (i.length ? i.filter(":not(.ui-state-disabled)").eq(0).trigger("mouseover").trigger("mouseenter").find("input") : t.find("a").first()).trigger("focus"), window.scrollTo(l, n), a.addClass("ui-state-active"), this._isOpen = !0, this._trigger("open")) }, close: function () { var e, t, i; !1 === this._trigger("beforeclose") || this.options.listbox || (e = this.$menu, t = this.options.closeEffect, i = this.$button, t ? "string" == typeof t ? e.hide(t, this.speed) : "object" == typeof t && t.constructor == Array ? e.hide(t[0], t[1] || this.speed) : "object" == typeof t && t.constructor == Object && e.hide(t) : e.css("display", "none"), i.removeClass("ui-state-active").trigger("blur").trigger("mouseleave"), this.element.trigger("blur"), this._isOpen = !1, this._trigger("close"), i.trigger("focus")) }, position: function () { var e, t = this.$button; this._savedButtonHeight = t.outerHeight(!1), p.ui && p.ui.position ? this.$menu.position(this.options.position) : ((e = {}).top = t.offset().top + this._savedButtonHeight, e.left = t.offset().left, this.$menu.offset(e)) }, enable: function (e) { this._toggleDisabled(!1, e) }, disable: function (e) { this._toggleDisabled(!0, e) }, checkAll: function (e) { this._trigger("beforeCheckAll"), this.options.maxSelected || (void 0 === e ? this._toggleChecked(!0) : this._toggleChecked(!0, this._multiselectOptgroupFilter(e).find("input")), this._trigger("checkAll")) }, uncheckAll: function (e) { this._trigger("beforeUncheckAll"), void 0 === e ? this._toggleChecked(!1) : this._toggleChecked(!1, this._multiselectOptgroupFilter(e).find("input")), this.element[0].multiple || this.$inputs.filter(":checked").length || (this.element[0].selectedIndex = -1), this._trigger("uncheckAll") }, flipAll: function (e) { this._trigger("beforeFlipAll"); var t = void 0 !== e, i = this.options.maxSelected, s = this.$inputs.length, l = this.$inputs.filter(":checked").length, n = t ? this._multiselectOptgroupFilter(e).find("input") : null, o = t ? n.length : 0, e = t ? n.filter(":checked").length : 0; !i || (t ? l - e + o - e : s - l) <= i ? (t ? this._toggleChecked("!", n) : this._toggleChecked("!"), this._trigger("flipAll")) : this.buttonMessage("<center><b>Flip All Not Permitted.</b></center>") }, collapseAll: function (e) { this._trigger("beforeCollapseAll"), (void 0 === e ? this.$checkboxes.find(".ui-multiselect-optgroup") : this._multiselectOptgroupFilter(e)).addClass("ui-multiselect-collapsed").children(".ui-multiselect-collapser").attr("title", this.linkInfo.expand.title).html(this.linkInfo.expand.icon), this._trigger("collapseAll") }, expandAll: function (e) { this._trigger("beforeExpandAll"), (void 0 === e ? this.$checkboxes.find(".ui-multiselect-optgroup") : this._multiselectOptgroupFilter(e)).removeClass("ui-multiselect-collapsed").children(".ui-multiselect-collapser").attr("title", this.linkInfo.collapse.title).html(this.linkInfo.collapse.icon), this._trigger("expandAll") }, buttonMessage: function (e) { var t = this; t.$buttonlabel.html(e), setTimeout(function () { t.update() }, 1e3) }, getChecked: function () { return this.$inputs.filter(":checked") }, getUnchecked: function () { return this.$inputs.filter(":not(:checked)") }, destroy: function () { return p.Widget.prototype.destroy.call(this), this.document.off(this._namespaceID), p(this.element[0].form).off(this._namespaceID), this.options.listbox || this.$button.remove(), this.$menu.remove(), this.element.show(), this }, isOpen: function () { return this._isOpen }, widget: function () { return this.$menu }, getNamespaceID: function () { return this._namespaceID }, getButton: function () { return this.$button }, getMenu: function () { return this.$menu }, getLabels: function () { return this.$labels }, getCollapsed: function () { return this.$checkboxes.find(".ui-multiselect-collapsed") }, value: function (e) { return void 0 !== e ? (this.element.val(e), this.resync(), this.element) : this.element.val() }, htmlAllowedFor: function (e) { return -1 < this.options.htmlText.indexOf(e) }, addOption: function (e, t, i) { var s = this, l = s.htmlAllowedFor("options") ? "html" : "text", l = p(document.createElement("option")).attr(e)[l](t), t = l.get(0); void 0 === i ? (s.element.append(l), s.$checkboxes.append(s._makeOption(t))) : (s._nativeOptgroupFilter(i).append(l), s._multiselectOptgroupFilter(i).append(s._makeOption(t))), s._updateCache() }, _nativeOptgroupFilter: function (t) { return this.element.children("OPTGROUP").filter(function (e) { return "number" == typeof t ? e === t : this.getAttribute("label") === t }) }, _multiselectOptgroupFilter: function (t) { return this.$menu.find(".ui-multiselect-optgroup").filter(function (e) { return "number" == typeof t ? e === t : this.getElementsByClassName("ui-multiselect-grouplabel")[0].textContent === t }) }, removeOption: function (e) { e && (this.element.find("option[value=" + e + "]").remove(), this.$labels.find("input[value=" + e + "]").parents("li").remove(), this._updateCache()) }, _setOption: function (e, t) { var i = this.$header, s = this.$menu; switch (e) { case "header": "boolean" == typeof t ? i.toggle(t) : "string" == typeof t && (this.$headerLinkContainer.children("li:not(:last-child)").remove(), this.$headerLinkContainer.prepend("<li>" + t + "</li>")); break; case "checkAllText": case "uncheckAllText": case "flipAllText": case "collapseAllText": case "expandAllText": "checkAllText" === e && this.options.maxSelected || i.find("a." + this.linkInfo[e.replace("Text", "")].class + " span").eq(-1).html(t); break; case "checkAllIcon": case "uncheckAllIcon": case "flipAllIcon": case "collapseAllIcon": case "expandAllIcon": "checkAllIcon" === e && this.options.maxSelected || i.find("a." + this.linkInfo[e.replace("Icon", "")].class + " span").eq(0).replaceWith(t); break; case "openIcon": s.find("span.ui-multiselect-open").html(t); break; case "closeIcon": s.find("a.ui-multiselect-close").html(t); break; case "buttonWidth": case "menuWidth": this.options[e] = t, this._setButtonWidth(!0), this._setMenuWidth(!0); break; case "menuHeight": this.options[e] = t, this._setMenuHeight(!0); break; case "selectedText": case "selectedList": case "maxSelected": case "noneSelectedText": case "selectedListSeparator": this.options[e] = t, this.update(!0); break; case "classes": s.add(this.$button).removeClass(this.options.classes).addClass(t); break; case "multiple": var l = this.element; !!l[0].multiple !== t && (s.toggleClass("ui-multiselect-multiple", t).toggleClass("ui-multiselect-single", !t), l[0].multiple = t, this.uncheckAll(), this.refresh()); break; case "position": null === t || p.isEmptyObject(t) || (this.options.position = t), this.position(); break; case "zIndex": this.options.zIndex = t, this.$menu.css("z-index", t); break; default: this.options[e] = t }p.Widget.prototype._setOption.apply(this, arguments) }, _parse2px: d }), p.ui && "dialog" in p.ui && p.widget("ui.dialog", p.ui.dialog, { _allowInteraction: function (e) { if (this._super(e) || p(e.target).closest(".ui-multiselect-menu").length) return !0 } }) }(jQuery);